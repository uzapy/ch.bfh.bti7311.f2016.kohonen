#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kohonen.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSets")]
	public partial class IrisDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIris(Iris instance);
    partial void UpdateIris(Iris instance);
    partial void DeleteIris(Iris instance);
    #endregion
		
		public IrisDataContext() : 
				base(global::Kohonen.Data.Properties.Settings.Default.DataSetsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IrisDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IrisDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IrisDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IrisDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Iris> Iris
		{
			get
			{
				return this.GetTable<Iris>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Iris")]
	public partial class Iris : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private double _SepalLength;
		
		private double _SepalWidth;
		
		private double _PetalLength;
		
		private double _PetalWidth;
		
		private string _Species;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSepalLengthChanging(double value);
    partial void OnSepalLengthChanged();
    partial void OnSepalWidthChanging(double value);
    partial void OnSepalWidthChanged();
    partial void OnPetalLengthChanging(double value);
    partial void OnPetalLengthChanged();
    partial void OnPetalWidthChanging(double value);
    partial void OnPetalWidthChanged();
    partial void OnSpeciesChanging(string value);
    partial void OnSpeciesChanged();
    #endregion
		
		public Iris()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SepalLength", DbType="Float NOT NULL")]
		public double SepalLength
		{
			get
			{
				return this._SepalLength;
			}
			set
			{
				if ((this._SepalLength != value))
				{
					this.OnSepalLengthChanging(value);
					this.SendPropertyChanging();
					this._SepalLength = value;
					this.SendPropertyChanged("SepalLength");
					this.OnSepalLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SepalWidth", DbType="Float NOT NULL")]
		public double SepalWidth
		{
			get
			{
				return this._SepalWidth;
			}
			set
			{
				if ((this._SepalWidth != value))
				{
					this.OnSepalWidthChanging(value);
					this.SendPropertyChanging();
					this._SepalWidth = value;
					this.SendPropertyChanged("SepalWidth");
					this.OnSepalWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetalLength", DbType="Float NOT NULL")]
		public double PetalLength
		{
			get
			{
				return this._PetalLength;
			}
			set
			{
				if ((this._PetalLength != value))
				{
					this.OnPetalLengthChanging(value);
					this.SendPropertyChanging();
					this._PetalLength = value;
					this.SendPropertyChanged("PetalLength");
					this.OnPetalLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PetalWidth", DbType="Float NOT NULL")]
		public double PetalWidth
		{
			get
			{
				return this._PetalWidth;
			}
			set
			{
				if ((this._PetalWidth != value))
				{
					this.OnPetalWidthChanging(value);
					this.SendPropertyChanging();
					this._PetalWidth = value;
					this.SendPropertyChanged("PetalWidth");
					this.OnPetalWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Species", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				if ((this._Species != value))
				{
					this.OnSpeciesChanging(value);
					this.SendPropertyChanging();
					this._Species = value;
					this.SendPropertyChanged("Species");
					this.OnSpeciesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
